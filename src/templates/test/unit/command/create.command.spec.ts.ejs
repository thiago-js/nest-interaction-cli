import { Test, TestingModule } from "@nestjs/testing";
import { v4 } from "uuid";
import { AppTestRWModule } from "@/test/unit/app-test-RW.module";
import { ILogger } from "@/infra/logger/logger.client";
import { ICreate<%= props.nameCapitalize %>Command } from "@/domain/command/create-<%= props.name %>.command";
import { Create<%= props.nameCapitalize %>Exception } from "@/domain/exceptions/create-<%= props.name %>.exception";
import {
  I<%= props.nameCapitalize %>Repository,
  <%= props.nameCapitalize %>Params,
} from "@/domain/repository/<%= props.name %>-repository.interface";
import { <%= props.nameCapitalize %>Fixture } from "@/test/unit/fixture/<%= props.name %>.fixture";

describe("Create<%= props.nameCapitalize %>Command", () => {
  let sut: ICreate<%= props.nameCapitalize %>Command;
  let <%= props.name %>Repository = {
    create: jest.fn(),
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [AppTestRWModule],
    })
      .overrideProvider(ILogger)
      .useValue({
        log: jest.fn(),
      })
      .overrideProvider(I<%= props.nameCapitalize %>Repository)
      .useValue(<%= props.name %>Repository)
      .compile();

    sut = module.get<ICreate<%= props.nameCapitalize %>Command>(ICreate<%= props.nameCapitalize %>Command);
  });

  it("should be defined", () => {
    expect(sut).toBeDefined();
  });

  it("should create a <%= props.name %>", async () => {
    const <%= props.name %>Params: <%= props.nameCapitalize %>Params = {
      ...<%= props.nameCapitalize %>Fixture.get<%= props.nameCapitalize %>Fixture(),
    };

    const expected<%= props.nameCapitalize %> = {
      <%= props.name %>Uid: v4(),
      ...<%= props.nameCapitalize %>Fixture.get<%= props.nameCapitalize %>Fixture(),
    };

    <%= props.name %>Repository.create.mockResolvedValue(expected<%= props.nameCapitalize %>);

    const result = await sut.execute(<%= props.name %>Params);

    expect(result).toEqual({
      ...expected<%= props.nameCapitalize %>,
    });

    expect(<%= props.name %>Repository.create).toHaveBeenCalled();
    expect(<%= props.name %>Repository.create).toHaveBeenCalledWith(<%= props.name %>Params);
  });

  it("should throw exception Create<%= props.nameCapitalize %>Exception when not create <%= props.name %>", async () => {
    const <%= props.name %>Params: <%= props.nameCapitalize %>Params = {
      ...<%= props.nameCapitalize %>Fixture.get<%= props.nameCapitalize %>Fixture(),
    };

    <%= props.name %>Repository.create.mockRejectedValue(
      new Create<%= props.nameCapitalize %>Exception("Error when try to create a <%= props.name %>")
    );

    await expect(sut.execute(<%= props.name %>Params)).rejects.toThrow(
      Create<%= props.nameCapitalize %>Exception
    );
  });

  it("should throw exception Create<%= props.nameCapitalize %>Exception when not create <%= props.name %>", async () => {
    const <%= props.name %>Params: <%= props.nameCapitalize %>Params = {
      ...<%= props.nameCapitalize %>Fixture.get<%= props.nameCapitalize %>Fixture(),
    };

    <%= props.name %>Repository.create.mockRejectedValue(
      new Create<%= props.nameCapitalize %>Exception("Error when try to create a <%= props.name %>")
    );

    await expect(sut.execute(<%= props.name %>Params)).rejects.toThrow(
      Create<%= props.nameCapitalize %>Exception
    );
  });
});
