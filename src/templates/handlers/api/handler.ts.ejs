import { INestApplication, ValidationPipe } from "@nestjs/common";
import { NestFactory } from "@nestjs/core";
import { ExpressAdapter } from "@nestjs/platform-express";
import serverlessExpress from "@vendia/serverless-express";

import express from "express";
import httpContext from "express-http-context";

import { AppModule } from "@/handlers/api/app.module";
import { DocumentBuilder, SwaggerModule } from "@nestjs/swagger";

let cachedServer: any;

async function setupSwagger(app: INestApplication) {
  const config = new DocumentBuilder()
    .setTitle("<%= props.nameCapitalize %> API")
    .setDescription("The Books API description")
    .setVersion("1.0")
    .addTag("<%= props.name %>")
    .build();

  const document = SwaggerModule.createDocument(app, config);

  SwaggerModule.setup("api", app, document);
}

async function bootstrapServer() {
  if (!cachedServer) {
    const expressApp = express();
    expressApp.use(httpContext.middleware);
    const nestApp = await NestFactory.create(
      AppModule,
      new ExpressAdapter(expressApp)
    );

    nestApp.useGlobalPipes(new ValidationPipe({ transform: true }));
    nestApp.enableCors();

    setupSwagger(nestApp);

    await nestApp.init();

    cachedServer = serverlessExpress({ app: expressApp });
  }

  return cachedServer;
}

export const handler = async (event: any, context: any, callback: any) => {
  if (event.path === "/api") {
    event.path = "/api/";
  }

  event.path = event.path.includes("swagger-ui")
    ? `/api${event.path}`
    : event.path;

  const server = await bootstrapServer();
  return server(event, context, callback);
};
